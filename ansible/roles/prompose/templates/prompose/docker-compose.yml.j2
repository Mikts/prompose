version: '2'

networks:
  monitor-net:
    driver: bridge

volumes:
    prometheus_data: {}
    grafana_data: {}

services:
{% if inventory_hostname in groups['prometheus'] %}
  prometheus:
    image: {{ prometheus_image }}
    container_name: {{ prometheus_container_name }}
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention={{ prometheus_storage_retention }}'
      - '--web.enable-lifecycle'
      - '--web.external-url=http://{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}:{{ prometheus_port }}'
    restart: unless-stopped
    ports:
      - {{ prometheus_port }}:9090
    links:
      - cadvisor:{{ cadvisor_container_name }}
      - alertmanager:{{ alertmanager_container_name }}
    depends_on:
      - {{ cadvisor_container_name }}
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"
{% endif %}

{% if inventory_hostname in groups['alertmanager'] and enable_alertmanager | bool %}
  alertmanager:
    image: {{ alertmanager_image }}
    container_name: {{ alertmanager_container_name }}
    volumes:
      - ./alertmanager/:/etc/alertmanager/
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}:{{ alertmanager_port }}'
{% if groups['alertmanager'] | length > 1 %}
      - '--cluster.advertise-address={{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}:{{ alertmanager_cluster_listen_port }}'
{% for cluster_host in groups['alertmanager'] %}
{% if cluster_host != inventory_hostname %}
      - '--cluster.peer={{ hostvars[cluster_host]['ansible_default_ipv4']['address'] }}:{{ alertmanager_cluster_listen_port }}'
{% endif %}
{% endfor %}
{% endif %}
    restart: unless-stopped
    ports:
      - {{ alertmanager_port }}:9093
{% if groups['alertmanager'] | length > 1 %}
      - {{ alertmanager_cluster_listen_port }}:9094
{% endif %}
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"
{% endif %}

{% if inventory_hostname in groups['unsee'] and enable_unsee | bool %}
  unsee_dashboard:
    image: {{ unsee_image }}
    container_name: {{ unsee_container_name }}
    depends_on:
      - {{ alertmanager_container_name }}
    restart: on-failure
    environment:
      ALERTMANAGER_URI=http://{{ hostvars[groups['alertmanager'][0]]['ansible_default_ipv4']['address'] }}:{{ alertmanager_port }}
      PORT="{{ unsee_dashboard_port }}"
    ports:
      - {{ unsee_dashboard_port }}:{{ unsee_dashboard_port }}
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"
{% endif %}

{% if inventory_hostname in groups['telegram-bot'] and enable_telegram_bot | bool %}
  telegram_bot:
    image: {{ telegram_bot_image }}
    container_name: {{ telegram_bot_container_name }}
    depends_on:
      - {{ alertmanager_container_name }}
    environment:
      ALERTMANAGER_URL="http://{{ hostvars[groups['alertmanager'][0]]['ansible_default_ipv4']['address'] }}:9093"
      LISTEN_ADDR=0.0.0.0:8080
      BOLT_PATH=/data/bot.db
      STORE=bolt
      TELEGRAM_ADMIN="{{ alert_telegram_admin }}"
      TELEGRAM_TOKEN="{{ alert_telegram_token }}"
    volumes:
      - telegram_bot_data:/data
    networks:
      - monitor-net
    ports:
      - {{ telegram_bot_port }}:8080
{% endif %}

{% if inventory_hostname in groups['node-exporter'] and enable_node_exporter | bool %}
  node_exporter:
    image: {{ node_exporter_image }}
    container_name: {{ node_exporter_container_name }}
    user: root
    privileged: true
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)'
    restart: unless-stopped
    ports:
      - {{ node_exporter_port }}:9100
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"
{% endif %}

{% if inventory_hostname in groups['snmp-exporter']  and enable_snmp_exporter | bool %}
  snmp_exporter:
    image: {{ snmp_exporter_image }}
    container: {{ snmp_exporter_container_name }}
    volumes:
      - ./prometheus/snmp.yml:/etc/snmp_exporter/snmp.yml # This is an example config, please configure it or simply use snmp-generator tool to generate a new config.
    ports:
      - {{ snmp_exporter_port }}:9116
    restart: unless-stopped
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"
{% endif %}

{% if inventory_hostname in groups['cadvisor'] and enable_cadvisor | bool %}
  cadvisor:
    image: {{ cadvisor_image }}
    container_name: {{ cadvisor_container_name }}
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /cgroup:/cgroup:ro # doesn't work on MacOS only for Linux
    restart: unless-stopped
    ports:
      - {{ cadvisor_port }}:8080
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"
{% endif %}

{% if inventory_hostname in groups['ceph-exporter'] and enable_ceph_exporter | bool %}
  ceph_exporter:
    image: {{ ceph_exporter_image }}
    container_name: {{ ceph_exporter_container_name }}
    volumes:
      - /etc/ceph:/etc/ceph
    ports:
      - {{ ceph_exporter_port }}:9128
    labels:
      org.label-schema.group: "monitoring"
{% endif %}

{% if inventory_hostname in groups['rabbit-exporter'] and enable_rabbit_exporter | bool %}
  rabbit_exporter:
    image: {{ rabbit_exporter_image }}
    container_name: {{ rabbit_exporter_container_name }}
    ports:
      - {{ rabbit_exporter_port }}:{{ rabbit_exporter_port }}
    environment:
      RABBIT_URL="{{ rabbit_url }}"
      RABBIT_USER="{{ rabbit_user }}"
      RABBIT_PASSWORD="{{ rabbit_password }}"
      PUBLISH_PORT="{{ rabbit_exporter_port }}"
      OUTPUT_FORMAT="{{ rabbit_output_format }}"
      LOG_LEVEL="{{ rabbit_log_level }}"
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"
{% endif %}

{% if inventory_hostname in groups['grafana'] and enable_grafana | bool %}
  grafana:
    image: {{ grafana_image }}
    container_name: {{ grafana_container_name }}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    environment:
      - GF_SECURITY_ADMIN_USER="{{ grafana_user }}"
      - GF_SECURITY_ADMIN_PASSWORD="{{ grafana_password }}"
      - GF_USERS_ALLOW_SIGN_UP=False
    restart: unless-stopped
    ports:
      - {{ grafana_port }}:3000
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"
{% endif %}
